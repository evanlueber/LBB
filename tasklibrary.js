const express = require('express')
const app = express()
const port = 3000
const session = require('express-session')

const swaggerUi = require('swagger-ui-express')
const swaggerFile = require('./swagger_output.json')

// examples generated by chatgpt but id
let tasks = [
  {
    id: 1,
    userId: 1,
    title: 'vacuuming',
    created_at: '15.06.2023',
    done_at: '16.06.2023'
  },
  {
    id: 2,
    userId: 1,
    title: 'dishes',
    created_at: '14.06.2023',
    done_at: '15.06.2023'
  },
  {
    id: 3,
    userId: 2,
    title: 'gaming',
    created_at: '13.06.2023',
    done_at: '13.08.2023'
  }
]

const logins = [
  {
    id: 1,
    email: 'evan@kbw.ch',
    password: 'm295'
  },
  {
    id: 2,
    email: 'ael@kbw.ch',
    password: 'm295'
  }
]

app.use(
  session({
    secret: 'supersecret',
    resave: false,
    saveUninitialized: true,
    cookie: {}
  })
)

app.use('/swagger-ui', swaggerUi.serve, swaggerUi.setup(swaggerFile))
app.use(express.urlencoded({ extended: true }))
app.use(express.json())

app.get('/tasks', (req, res) => {
  // #swagger.tags = ["Task"]
  // #swagger.description = "endpoint to get all tasks"
  /* #swagger.parameters['getTasks'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Task'}
  }
  */
  const currentLogin = logins.find((login) => login.email === req.session.email)
  if (!currentLogin) {
    /* #swagger.responses[403] = {
      description: "Error"
    }
    */
    res.status(403).json({ Authorization: 'Not authorized' })
  } else {
    /* #swagger.responses[200] = {
    description: "tasks",
    shema: [{
        $ref: "#/definitions/Task"
    }]
  }
  */
    res
      .status(200)
      .json(tasks.filter((task) => task.userId === currentLogin.id))
  }
})

app.post('/tasks', (req, res) => {
  // #swagger.tags = ["Task"]
  // #swagger.description = "endpoint to create a tasks"
  /* #swagger.parameters['createTasks'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Task'}
  }
  */
  if (req.session.email) {
    const newTask = {
      id: tasks.length + 1,
      userId: req.body.userId,
      title: req.body.title,
      created_at: req.body.created_at,
      done_at: req.body.done_at || ''
    }
    if (newTask.title === '') {
      /* #swagger.responses[406] = {
        description: "Error"
      }
      */
      res.status(406).json({ input: 'title is not filled out' })
    }
    tasks.push(newTask)
    /* #swagger.responses[201] = {
    description: "tasks",
    shema: [{
        $ref: "#/definitions/Task"
    }]
  }
  */
    res.status(201).json(newTask)
  } else {
    /* #swagger.responses[403] = {
      description: "Error"
    }
    */
    res.status(403).json({ Authorization: 'Not authorized' })
  }
})

app.get('/tasks/:id', (req, res) => {
  // #swagger.tags = ["Task"]
  // #swagger.description = "endpoint to get a tasks by id"
  /* #swagger.parameters['getTask'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Task'}
  }
  */
  const currentLogin = logins.find((login) => login.email === req.session.email)
  const task = tasks.filter((tasks) => +tasks.id === +req.params.id)[0]
  if (!tasks) {
    /* #swagger.responses[404] = {
      description: "Error"
    }
    */
    res.sendStatus(404)
  } else if (task.userId === currentLogin.id) {
    /* #swagger.responses[200] = {
    description: "tasks",
    shema: [{
        $ref: "#/definitions/Task"
    }]
  }
  */
    res.status(200).json(task)
  } else {
    /* #swagger.responses[403] = {
      description: "Error"
    }
    */
    res.status(403).json({ Authorization: 'Not authorized' })
  }
})

app.put('/tasks/:id', (req, res) => {
  // #swagger.tags = ["Task"]
  // #swagger.description = "endpoint to get update a task"
  /* #swagger.parameters['updateTask'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Task'}
  }
  */
  if (req.session.email) {
    const index = tasks.findIndex((tasks) => tasks.id === +req.params.id)
    const updatedTask = {
      id: +req.params.id,
      userId: req.body.userId,
      title: req.body.title,
      created_at: req.body.created_at,
      done_at: req.body.done_at || ''
    }

    if (index === -1) {
      /* #swagger.responses[404] = {
      description: "Error"
      }
      */
      res.sendStatus(404)
    } else if (updatedTask.title === '') {
      /* #swagger.responses[406] = {
        description: "Error"
      }
      */
      res.status(406).json({ input: 'title is not filled out' })
    } else {
      tasks.splice(index, 1, updatedTask)
      /* #swagger.responses[201] = {
        description: "tasks",
        shema: [{
          $ref: "#/definitions/Task"
        }]
      }
      */
      res.status(201).json(updatedTask)
    }
  } else {
    /* #swagger.responses[403] = {
        description: "Error"
    }
    */
    res.status(403).json({ Authorization: 'Not authorized' })
  }
})

app.delete('/tasks/:id', (req, res) => {
  // #swagger.tags = ["Task"]
  // #swagger.description = "endpoint to delete a tasks"
  /* #swagger.parameters['deleteTask'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Task'}
  }
  */
  if (req.session.email) {
    const task = tasks.filter((tasks) => tasks.id === +req.params.id)[0]
    if (!task) {
      /* #swagger.responses[404] = {
      description: "Error"
      }
      */
      res.sendStatus(404)
    } else {
      tasks = tasks.filter((tasks) => tasks.id !== +req.params.id)
      /* #swagger.responses[200] = {
    description: "tasks",
    shema: [{
        $ref: "#/definitions/Task"
    }]
  }
  */
      res.status(200).json(task)
    }
  } else {
    /* #swagger.responses[403] = {
      description: "Error"
      }
      */
    res.status(403).json({ Authorization: 'Not authorized' })
  }
})

app.post('/login', (req, res) => {
  // #swagger.tags = ["Login"]
  // #swagger.description = "endpoint to log in"
  /* #swagger.parameters['logIn'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Login'}
  }
  */
  if (
    logins.find(
      (logins) =>
        req.body.email === logins.email && req.body.password === logins.password
    )
  ) {
    req.session.email = req.body.email
    /* #swagger.responses[201] = {
    description: "logins",
    shema: [{
        $ref: "#/definitions/Login"
    }]
  }
  */
    res.status(201).send('Your logged in')
  } else {
    /* #swagger.responses[401] = {
      description: "Error"
      }
      */
    res.status(401).send('Email or password incorrect')
  }
})

app.get('/verify', (req, res) => {
  // #swagger.tags = ["Login"]
  // #swagger.description = "endpoint to verify"
  /* #swagger.parameters['getVerify'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Login'}
  }
  */
  if (req.session.email) {
    /* #swagger.responses[200] = {
    description: "logins",
    shema: [{
        $ref: "#/definitions/Login"
    }]
  }
  */
    res.status(200)
    res.send(req.session.email)
  } else {
    /* #swagger.responses[401] = {
      description: "Error"
      }
      */
    res.sendStatus(401)
  }
})

app.delete('/logout', (req, res) => {
  // #swagger.tags = ["Login"]
  // #swagger.description = "endpoint to log out"
  /* #swagger.parameters['logOut'] = {
    in: 'body',
    description: '',
    required: true,
    shema: {$ref: '#/definitions/Login'}
  }
  */
  req.session.destroy()
  /* #swagger.responses[204] = {
    description: "tasks",
    shema: [{
        $ref: "#/definitions/Task"
    }]
  }
  */
  res.sendStatus(204)
})

app.listen(port, () => console.log(`App is listening on port ${port}`))
